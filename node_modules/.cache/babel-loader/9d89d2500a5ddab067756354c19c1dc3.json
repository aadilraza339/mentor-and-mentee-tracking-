{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.HttpProxyMiddleware = void 0;\n\nconst httpProxy = require(\"http-proxy\");\n\nconst _ = require(\"lodash\");\n\nconst config_factory_1 = require(\"./config-factory\");\n\nconst contextMatcher = require(\"./context-matcher\");\n\nconst handlers = require(\"./handlers\");\n\nconst logger_1 = require(\"./logger\");\n\nconst PathRewriter = require(\"./path-rewriter\");\n\nconst Router = require(\"./router\");\n\nclass HttpProxyMiddleware {\n  constructor(context, opts) {\n    this.logger = logger_1.getInstance();\n    this.wsInternalSubscribed = false; // https://github.com/Microsoft/TypeScript/wiki/'this'-in-TypeScript#red-flags-for-this\n\n    this.middleware = (req, res, next) => __awaiter(this, void 0, void 0, function* () {\n      if (this.shouldProxy(this.config.context, req)) {\n        try {\n          const activeProxyOptions = yield this.prepareProxyRequest(req);\n          this.proxy.web(req, res, activeProxyOptions);\n        } catch (err) {\n          next(err);\n        }\n      } else {\n        next();\n      }\n\n      if (this.proxyOptions.ws === true) {\n        // use initial request to access the server object to subscribe to http upgrade event\n        this.catchUpgradeRequest(req.connection.server);\n      }\n    });\n\n    this.catchUpgradeRequest = server => {\n      if (!this.wsInternalSubscribed) {\n        server.on('upgrade', this.handleUpgrade); // prevent duplicate upgrade handling;\n        // in case external upgrade is also configured\n\n        this.wsInternalSubscribed = true;\n      }\n    };\n\n    this.handleUpgrade = (req, socket, head) => __awaiter(this, void 0, void 0, function* () {\n      if (this.shouldProxy(this.config.context, req)) {\n        const activeProxyOptions = yield this.prepareProxyRequest(req);\n        this.proxy.ws(req, socket, head, activeProxyOptions);\n        this.logger.info('[HPM] Upgrading to WebSocket');\n      }\n    });\n    /**\n     * Determine whether request should be proxied.\n     *\n     * @private\n     * @param  {String} context [description]\n     * @param  {Object} req     [description]\n     * @return {Boolean}\n     */\n\n\n    this.shouldProxy = (context, req) => {\n      const path = req.originalUrl || req.url;\n      return contextMatcher.match(context, path, req);\n    };\n    /**\n     * Apply option.router and option.pathRewrite\n     * Order matters:\n     *    Router uses original path for routing;\n     *    NOT the modified path, after it has been rewritten by pathRewrite\n     * @param {Object} req\n     * @return {Object} proxy options\n     */\n\n\n    this.prepareProxyRequest = req => __awaiter(this, void 0, void 0, function* () {\n      // https://github.com/chimurai/http-proxy-middleware/issues/17\n      // https://github.com/chimurai/http-proxy-middleware/issues/94\n      req.url = req.originalUrl || req.url; // store uri before it gets rewritten for logging\n\n      const originalPath = req.url;\n\n      const newProxyOptions = _.assign({}, this.proxyOptions); // Apply in order:\n      // 1. option.router\n      // 2. option.pathRewrite\n\n\n      yield this.applyRouter(req, newProxyOptions);\n      yield this.applyPathRewrite(req, this.pathRewriter); // debug logging for both http(s) and websockets\n\n      if (this.proxyOptions.logLevel === 'debug') {\n        const arrow = logger_1.getArrow(originalPath, req.url, this.proxyOptions.target, newProxyOptions.target);\n        this.logger.debug('[HPM] %s %s %s %s', req.method, originalPath, arrow, newProxyOptions.target);\n      }\n\n      return newProxyOptions;\n    }); // Modify option.target when router present.\n\n\n    this.applyRouter = (req, options) => __awaiter(this, void 0, void 0, function* () {\n      let newTarget;\n\n      if (options.router) {\n        newTarget = yield Router.getTarget(req, options);\n\n        if (newTarget) {\n          this.logger.debug('[HPM] Router new target: %s -> \"%s\"', options.target, newTarget);\n          options.target = newTarget;\n        }\n      }\n    }); // rewrite path\n\n\n    this.applyPathRewrite = (req, pathRewriter) => __awaiter(this, void 0, void 0, function* () {\n      if (pathRewriter) {\n        const path = yield pathRewriter(req.url, req);\n\n        if (typeof path === 'string') {\n          req.url = path;\n        } else {\n          this.logger.info('[HPM] pathRewrite: No rewritten path found. (%s)', req.url);\n        }\n      }\n    });\n\n    this.logError = (err, req, res) => {\n      const hostname = req.headers && req.headers.host || req.hostname || req.host; // (websocket) || (node0.10 || node 4/5)\n\n      const target = this.proxyOptions.target.host || this.proxyOptions.target;\n      const errorMessage = '[HPM] Error occurred while trying to proxy request %s from %s to %s (%s) (%s)';\n      const errReference = 'https://nodejs.org/api/errors.html#errors_common_system_errors'; // link to Node Common Systems Errors page\n\n      this.logger.error(errorMessage, req.url, hostname, target, err.code || err, errReference);\n    };\n\n    this.config = config_factory_1.createConfig(context, opts);\n    this.proxyOptions = this.config.options; // create proxy\n\n    this.proxy = httpProxy.createProxyServer({});\n    this.logger.info(`[HPM] Proxy created: ${this.config.context}  -> ${this.proxyOptions.target}`);\n    this.pathRewriter = PathRewriter.createPathRewriter(this.proxyOptions.pathRewrite); // returns undefined when \"pathRewrite\" is not provided\n    // attach handler to http-proxy events\n\n    handlers.init(this.proxy, this.proxyOptions); // log errors for debug purpose\n\n    this.proxy.on('error', this.logError); // https://github.com/chimurai/http-proxy-middleware/issues/19\n    // expose function to upgrade externally\n\n    this.middleware.upgrade = (req, socket, head) => {\n      if (!this.wsInternalSubscribed) {\n        this.handleUpgrade(req, socket, head);\n      }\n    };\n  }\n\n}\n\nexports.HttpProxyMiddleware = HttpProxyMiddleware;","map":{"version":3,"sources":["/home/shubhangi/Documents/mentor-and-mentee-tracking-/node_modules/http-proxy-middleware/dist/http-proxy-middleware.js"],"names":["__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","Object","defineProperty","exports","HttpProxyMiddleware","httpProxy","require","_","config_factory_1","contextMatcher","handlers","logger_1","PathRewriter","Router","constructor","context","opts","logger","getInstance","wsInternalSubscribed","middleware","req","res","shouldProxy","config","activeProxyOptions","prepareProxyRequest","proxy","web","err","proxyOptions","ws","catchUpgradeRequest","connection","server","on","handleUpgrade","socket","head","info","path","originalUrl","url","match","originalPath","newProxyOptions","assign","applyRouter","applyPathRewrite","pathRewriter","logLevel","arrow","getArrow","target","debug","method","options","newTarget","router","getTarget","logError","hostname","headers","host","errorMessage","errReference","error","code","createConfig","createProxyServer","createPathRewriter","pathRewrite","init","upgrade"],"mappings":"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","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.HttpProxyMiddleware = void 0;\nconst httpProxy = require(\"http-proxy\");\nconst _ = require(\"lodash\");\nconst config_factory_1 = require(\"./config-factory\");\nconst contextMatcher = require(\"./context-matcher\");\nconst handlers = require(\"./handlers\");\nconst logger_1 = require(\"./logger\");\nconst PathRewriter = require(\"./path-rewriter\");\nconst Router = require(\"./router\");\nclass HttpProxyMiddleware {\n    constructor(context, opts) {\n        this.logger = logger_1.getInstance();\n        this.wsInternalSubscribed = false;\n        // https://github.com/Microsoft/TypeScript/wiki/'this'-in-TypeScript#red-flags-for-this\n        this.middleware = (req, res, next) => __awaiter(this, void 0, void 0, function* () {\n            if (this.shouldProxy(this.config.context, req)) {\n                try {\n                    const activeProxyOptions = yield this.prepareProxyRequest(req);\n                    this.proxy.web(req, res, activeProxyOptions);\n                }\n                catch (err) {\n                    next(err);\n                }\n            }\n            else {\n                next();\n            }\n            if (this.proxyOptions.ws === true) {\n                // use initial request to access the server object to subscribe to http upgrade event\n                this.catchUpgradeRequest(req.connection.server);\n            }\n        });\n        this.catchUpgradeRequest = (server) => {\n            if (!this.wsInternalSubscribed) {\n                server.on('upgrade', this.handleUpgrade);\n                // prevent duplicate upgrade handling;\n                // in case external upgrade is also configured\n                this.wsInternalSubscribed = true;\n            }\n        };\n        this.handleUpgrade = (req, socket, head) => __awaiter(this, void 0, void 0, function* () {\n            if (this.shouldProxy(this.config.context, req)) {\n                const activeProxyOptions = yield this.prepareProxyRequest(req);\n                this.proxy.ws(req, socket, head, activeProxyOptions);\n                this.logger.info('[HPM] Upgrading to WebSocket');\n            }\n        });\n        /**\n         * Determine whether request should be proxied.\n         *\n         * @private\n         * @param  {String} context [description]\n         * @param  {Object} req     [description]\n         * @return {Boolean}\n         */\n        this.shouldProxy = (context, req) => {\n            const path = req.originalUrl || req.url;\n            return contextMatcher.match(context, path, req);\n        };\n        /**\n         * Apply option.router and option.pathRewrite\n         * Order matters:\n         *    Router uses original path for routing;\n         *    NOT the modified path, after it has been rewritten by pathRewrite\n         * @param {Object} req\n         * @return {Object} proxy options\n         */\n        this.prepareProxyRequest = (req) => __awaiter(this, void 0, void 0, function* () {\n            // https://github.com/chimurai/http-proxy-middleware/issues/17\n            // https://github.com/chimurai/http-proxy-middleware/issues/94\n            req.url = req.originalUrl || req.url;\n            // store uri before it gets rewritten for logging\n            const originalPath = req.url;\n            const newProxyOptions = _.assign({}, this.proxyOptions);\n            // Apply in order:\n            // 1. option.router\n            // 2. option.pathRewrite\n            yield this.applyRouter(req, newProxyOptions);\n            yield this.applyPathRewrite(req, this.pathRewriter);\n            // debug logging for both http(s) and websockets\n            if (this.proxyOptions.logLevel === 'debug') {\n                const arrow = logger_1.getArrow(originalPath, req.url, this.proxyOptions.target, newProxyOptions.target);\n                this.logger.debug('[HPM] %s %s %s %s', req.method, originalPath, arrow, newProxyOptions.target);\n            }\n            return newProxyOptions;\n        });\n        // Modify option.target when router present.\n        this.applyRouter = (req, options) => __awaiter(this, void 0, void 0, function* () {\n            let newTarget;\n            if (options.router) {\n                newTarget = yield Router.getTarget(req, options);\n                if (newTarget) {\n                    this.logger.debug('[HPM] Router new target: %s -> \"%s\"', options.target, newTarget);\n                    options.target = newTarget;\n                }\n            }\n        });\n        // rewrite path\n        this.applyPathRewrite = (req, pathRewriter) => __awaiter(this, void 0, void 0, function* () {\n            if (pathRewriter) {\n                const path = yield pathRewriter(req.url, req);\n                if (typeof path === 'string') {\n                    req.url = path;\n                }\n                else {\n                    this.logger.info('[HPM] pathRewrite: No rewritten path found. (%s)', req.url);\n                }\n            }\n        });\n        this.logError = (err, req, res) => {\n            const hostname = (req.headers && req.headers.host) || req.hostname || req.host; // (websocket) || (node0.10 || node 4/5)\n            const target = this.proxyOptions.target.host || this.proxyOptions.target;\n            const errorMessage = '[HPM] Error occurred while trying to proxy request %s from %s to %s (%s) (%s)';\n            const errReference = 'https://nodejs.org/api/errors.html#errors_common_system_errors'; // link to Node Common Systems Errors page\n            this.logger.error(errorMessage, req.url, hostname, target, err.code || err, errReference);\n        };\n        this.config = config_factory_1.createConfig(context, opts);\n        this.proxyOptions = this.config.options;\n        // create proxy\n        this.proxy = httpProxy.createProxyServer({});\n        this.logger.info(`[HPM] Proxy created: ${this.config.context}  -> ${this.proxyOptions.target}`);\n        this.pathRewriter = PathRewriter.createPathRewriter(this.proxyOptions.pathRewrite); // returns undefined when \"pathRewrite\" is not provided\n        // attach handler to http-proxy events\n        handlers.init(this.proxy, this.proxyOptions);\n        // log errors for debug purpose\n        this.proxy.on('error', this.logError);\n        // https://github.com/chimurai/http-proxy-middleware/issues/19\n        // expose function to upgrade externally\n        this.middleware.upgrade = (req, socket, head) => {\n            if (!this.wsInternalSubscribed) {\n                this.handleUpgrade(req, socket, head);\n            }\n        };\n    }\n}\nexports.HttpProxyMiddleware = HttpProxyMiddleware;\n"]},"metadata":{},"sourceType":"script"}