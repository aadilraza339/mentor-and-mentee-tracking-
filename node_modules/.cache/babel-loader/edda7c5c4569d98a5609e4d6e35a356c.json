{"ast":null,"code":"var url = require(\"url\");\n\nvar URL = url.URL;\n\nvar http = require(\"http\");\n\nvar https = require(\"https\");\n\nvar Writable = require(\"stream\").Writable;\n\nvar assert = require(\"assert\");\n\nvar debug = require(\"./debug\"); // Create handlers that pass events from native requests\n\n\nvar eventHandlers = Object.create(null);\n[\"abort\", \"aborted\", \"connect\", \"error\", \"socket\", \"timeout\"].forEach(function (event) {\n  eventHandlers[event] = function (arg1, arg2, arg3) {\n    this._redirectable.emit(event, arg1, arg2, arg3);\n  };\n}); // Error types with codes\n\nvar RedirectionError = createErrorType(\"ERR_FR_REDIRECTION_FAILURE\", \"\");\nvar TooManyRedirectsError = createErrorType(\"ERR_FR_TOO_MANY_REDIRECTS\", \"Maximum number of redirects exceeded\");\nvar MaxBodyLengthExceededError = createErrorType(\"ERR_FR_MAX_BODY_LENGTH_EXCEEDED\", \"Request body larger than maxBodyLength limit\");\nvar WriteAfterEndError = createErrorType(\"ERR_STREAM_WRITE_AFTER_END\", \"write after end\"); // An HTTP(S) request that can be redirected\n\nfunction RedirectableRequest(options, responseCallback) {\n  // Initialize the request\n  Writable.call(this);\n\n  this._sanitizeOptions(options);\n\n  this._options = options;\n  this._ended = false;\n  this._ending = false;\n  this._redirectCount = 0;\n  this._redirects = [];\n  this._requestBodyLength = 0;\n  this._requestBodyBuffers = []; // Attach a callback if passed\n\n  if (responseCallback) {\n    this.on(\"response\", responseCallback);\n  } // React to responses of native requests\n\n\n  var self = this;\n\n  this._onNativeResponse = function (response) {\n    self._processResponse(response);\n  }; // Perform the first request\n\n\n  this._performRequest();\n}\n\nRedirectableRequest.prototype = Object.create(Writable.prototype); // Writes buffered data to the current native request\n\nRedirectableRequest.prototype.write = function (data, encoding, callback) {\n  // Writing is not allowed if end has been called\n  if (this._ending) {\n    throw new WriteAfterEndError();\n  } // Validate input and shift parameters if necessary\n\n\n  if (!(typeof data === \"string\" || typeof data === \"object\" && \"length\" in data)) {\n    throw new TypeError(\"data should be a string, Buffer or Uint8Array\");\n  }\n\n  if (typeof encoding === \"function\") {\n    callback = encoding;\n    encoding = null;\n  } // Ignore empty buffers, since writing them doesn't invoke the callback\n  // https://github.com/nodejs/node/issues/22066\n\n\n  if (data.length === 0) {\n    if (callback) {\n      callback();\n    }\n\n    return;\n  } // Only write when we don't exceed the maximum body length\n\n\n  if (this._requestBodyLength + data.length <= this._options.maxBodyLength) {\n    this._requestBodyLength += data.length;\n\n    this._requestBodyBuffers.push({\n      data: data,\n      encoding: encoding\n    });\n\n    this._currentRequest.write(data, encoding, callback);\n  } // Error when we exceed the maximum body length\n  else {\n      this.emit(\"error\", new MaxBodyLengthExceededError());\n      this.abort();\n    }\n}; // Ends the current native request\n\n\nRedirectableRequest.prototype.end = function (data, encoding, callback) {\n  // Shift parameters if necessary\n  if (typeof data === \"function\") {\n    callback = data;\n    data = encoding = null;\n  } else if (typeof encoding === \"function\") {\n    callback = encoding;\n    encoding = null;\n  } // Write data if needed and end\n\n\n  if (!data) {\n    this._ended = this._ending = true;\n\n    this._currentRequest.end(null, null, callback);\n  } else {\n    var self = this;\n    var currentRequest = this._currentRequest;\n    this.write(data, encoding, function () {\n      self._ended = true;\n      currentRequest.end(null, null, callback);\n    });\n    this._ending = true;\n  }\n}; // Sets a header value on the current native request\n\n\nRedirectableRequest.prototype.setHeader = function (name, value) {\n  this._options.headers[name] = value;\n\n  this._currentRequest.setHeader(name, value);\n}; // Clears a header value on the current native request\n\n\nRedirectableRequest.prototype.removeHeader = function (name) {\n  delete this._options.headers[name];\n\n  this._currentRequest.removeHeader(name);\n}; // Global timeout for all underlying requests\n\n\nRedirectableRequest.prototype.setTimeout = function (msecs, callback) {\n  if (callback) {\n    this.once(\"timeout\", callback);\n  }\n\n  if (this.socket) {\n    startTimer(this, msecs);\n  } else {\n    var self = this;\n\n    this._currentRequest.once(\"socket\", function () {\n      startTimer(self, msecs);\n    });\n  }\n\n  this.once(\"response\", clearTimer);\n  this.once(\"error\", clearTimer);\n  return this;\n};\n\nfunction startTimer(request, msecs) {\n  clearTimeout(request._timeout);\n  request._timeout = setTimeout(function () {\n    request.emit(\"timeout\");\n  }, msecs);\n}\n\nfunction clearTimer() {\n  clearTimeout(this._timeout);\n} // Proxy all other public ClientRequest methods\n\n\n[\"abort\", \"flushHeaders\", \"getHeader\", \"setNoDelay\", \"setSocketKeepAlive\"].forEach(function (method) {\n  RedirectableRequest.prototype[method] = function (a, b) {\n    return this._currentRequest[method](a, b);\n  };\n}); // Proxy all public ClientRequest properties\n\n[\"aborted\", \"connection\", \"socket\"].forEach(function (property) {\n  Object.defineProperty(RedirectableRequest.prototype, property, {\n    get: function () {\n      return this._currentRequest[property];\n    }\n  });\n});\n\nRedirectableRequest.prototype._sanitizeOptions = function (options) {\n  // Ensure headers are always present\n  if (!options.headers) {\n    options.headers = {};\n  } // Since http.request treats host as an alias of hostname,\n  // but the url module interprets host as hostname plus port,\n  // eliminate the host property to avoid confusion.\n\n\n  if (options.host) {\n    // Use hostname if set, because it has precedence\n    if (!options.hostname) {\n      options.hostname = options.host;\n    }\n\n    delete options.host;\n  } // Complete the URL object when necessary\n\n\n  if (!options.pathname && options.path) {\n    var searchPos = options.path.indexOf(\"?\");\n\n    if (searchPos < 0) {\n      options.pathname = options.path;\n    } else {\n      options.pathname = options.path.substring(0, searchPos);\n      options.search = options.path.substring(searchPos);\n    }\n  }\n}; // Executes the next native request (initial or redirect)\n\n\nRedirectableRequest.prototype._performRequest = function () {\n  // Load the native protocol\n  var protocol = this._options.protocol;\n  var nativeProtocol = this._options.nativeProtocols[protocol];\n\n  if (!nativeProtocol) {\n    this.emit(\"error\", new TypeError(\"Unsupported protocol \" + protocol));\n    return;\n  } // If specified, use the agent corresponding to the protocol\n  // (HTTP and HTTPS use different types of agents)\n\n\n  if (this._options.agents) {\n    var scheme = protocol.substr(0, protocol.length - 1);\n    this._options.agent = this._options.agents[scheme];\n  } // Create the native request\n\n\n  var request = this._currentRequest = nativeProtocol.request(this._options, this._onNativeResponse);\n  this._currentUrl = url.format(this._options); // Set up event handlers\n\n  request._redirectable = this;\n\n  for (var event in eventHandlers) {\n    /* istanbul ignore else */\n    if (event) {\n      request.on(event, eventHandlers[event]);\n    }\n  } // End a redirected request\n  // (The first request must be ended explicitly with RedirectableRequest#end)\n\n\n  if (this._isRedirect) {\n    // Write the request entity and end.\n    var i = 0;\n    var self = this;\n    var buffers = this._requestBodyBuffers;\n\n    (function writeNext(error) {\n      // Only write if this request has not been redirected yet\n\n      /* istanbul ignore else */\n      if (request === self._currentRequest) {\n        // Report any write errors\n\n        /* istanbul ignore if */\n        if (error) {\n          self.emit(\"error\", error);\n        } // Write the next buffer if there are still left\n        else if (i < buffers.length) {\n            var buffer = buffers[i++];\n            /* istanbul ignore else */\n\n            if (!request.finished) {\n              request.write(buffer.data, buffer.encoding, writeNext);\n            }\n          } // End the request if `end` has been called on us\n          else if (self._ended) {\n              request.end();\n            }\n      }\n    })();\n  }\n}; // Processes a response from the current native request\n\n\nRedirectableRequest.prototype._processResponse = function (response) {\n  // Store the redirected response\n  var statusCode = response.statusCode;\n\n  if (this._options.trackRedirects) {\n    this._redirects.push({\n      url: this._currentUrl,\n      headers: response.headers,\n      statusCode: statusCode\n    });\n  } // RFC7231ยง6.4: The 3xx (Redirection) class of status code indicates\n  // that further action needs to be taken by the user agent in order to\n  // fulfill the request. If a Location header field is provided,\n  // the user agent MAY automatically redirect its request to the URI\n  // referenced by the Location field value,\n  // even if the specific status code is not understood.\n\n\n  var location = response.headers.location;\n\n  if (location && this._options.followRedirects !== false && statusCode >= 300 && statusCode < 400) {\n    // Abort the current request\n    this._currentRequest.removeAllListeners();\n\n    this._currentRequest.on(\"error\", noop);\n\n    this._currentRequest.abort(); // Discard the remainder of the response to avoid waiting for data\n\n\n    response.destroy(); // RFC7231ยง6.4: A client SHOULD detect and intervene\n    // in cyclical redirections (i.e., \"infinite\" redirection loops).\n\n    if (++this._redirectCount > this._options.maxRedirects) {\n      this.emit(\"error\", new TooManyRedirectsError());\n      return;\n    } // RFC7231ยง6.4: Automatic redirection needs to done with\n    // care for methods not known to be safe, [โฆ]\n    // RFC7231ยง6.4.2โ3: For historical reasons, a user agent MAY change\n    // the request method from POST to GET for the subsequent request.\n\n\n    if ((statusCode === 301 || statusCode === 302) && this._options.method === \"POST\" || // RFC7231ยง6.4.4: The 303 (See Other) status code indicates that\n    // the server is redirecting the user agent to a different resource [โฆ]\n    // A user agent can perform a retrieval request targeting that URI\n    // (a GET or HEAD request if using HTTP) [โฆ]\n    statusCode === 303 && !/^(?:GET|HEAD)$/.test(this._options.method)) {\n      this._options.method = \"GET\"; // Drop a possible entity and headers related to it\n\n      this._requestBodyBuffers = [];\n      removeMatchingHeaders(/^content-/i, this._options.headers);\n    } // Drop the Host header, as the redirect might lead to a different host\n\n\n    var previousHostName = removeMatchingHeaders(/^host$/i, this._options.headers) || url.parse(this._currentUrl).hostname; // Create the redirected request\n\n    var redirectUrl = url.resolve(this._currentUrl, location);\n    debug(\"redirecting to\", redirectUrl);\n    this._isRedirect = true;\n    var redirectUrlParts = url.parse(redirectUrl);\n    Object.assign(this._options, redirectUrlParts); // Drop the Authorization header if redirecting to another host\n\n    if (redirectUrlParts.hostname !== previousHostName) {\n      removeMatchingHeaders(/^authorization$/i, this._options.headers);\n    } // Evaluate the beforeRedirect callback\n\n\n    if (typeof this._options.beforeRedirect === \"function\") {\n      try {\n        this._options.beforeRedirect.call(null, this._options);\n      } catch (err) {\n        this.emit(\"error\", err);\n        return;\n      }\n\n      this._sanitizeOptions(this._options);\n    } // Perform the redirected request\n\n\n    try {\n      this._performRequest();\n    } catch (cause) {\n      var error = new RedirectionError(\"Redirected request failed: \" + cause.message);\n      error.cause = cause;\n      this.emit(\"error\", error);\n    }\n  } else {\n    // The response is not a redirect; return it as-is\n    response.responseUrl = this._currentUrl;\n    response.redirects = this._redirects;\n    this.emit(\"response\", response); // Clean up\n\n    this._requestBodyBuffers = [];\n  }\n}; // Wraps the key/value object of protocols with redirect functionality\n\n\nfunction wrap(protocols) {\n  // Default settings\n  var exports = {\n    maxRedirects: 21,\n    maxBodyLength: 10 * 1024 * 1024\n  }; // Wrap each protocol\n\n  var nativeProtocols = {};\n  Object.keys(protocols).forEach(function (scheme) {\n    var protocol = scheme + \":\";\n    var nativeProtocol = nativeProtocols[protocol] = protocols[scheme];\n    var wrappedProtocol = exports[scheme] = Object.create(nativeProtocol); // Executes a request, following redirects\n\n    wrappedProtocol.request = function (input, options, callback) {\n      // Parse parameters\n      if (typeof input === \"string\") {\n        var urlStr = input;\n\n        try {\n          input = urlToOptions(new URL(urlStr));\n        } catch (err) {\n          /* istanbul ignore next */\n          input = url.parse(urlStr);\n        }\n      } else if (URL && input instanceof URL) {\n        input = urlToOptions(input);\n      } else {\n        callback = options;\n        options = input;\n        input = {\n          protocol: protocol\n        };\n      }\n\n      if (typeof options === \"function\") {\n        callback = options;\n        options = null;\n      } // Set defaults\n\n\n      options = Object.assign({\n        maxRedirects: exports.maxRedirects,\n        maxBodyLength: exports.maxBodyLength\n      }, input, options);\n      options.nativeProtocols = nativeProtocols;\n      assert.equal(options.protocol, protocol, \"protocol mismatch\");\n      debug(\"options\", options);\n      return new RedirectableRequest(options, callback);\n    }; // Executes a GET request, following redirects\n\n\n    wrappedProtocol.get = function (input, options, callback) {\n      var request = wrappedProtocol.request(input, options, callback);\n      request.end();\n      return request;\n    };\n  });\n  return exports;\n}\n/* istanbul ignore next */\n\n\nfunction noop() {\n  /* empty */\n} // from https://github.com/nodejs/node/blob/master/lib/internal/url.js\n\n\nfunction urlToOptions(urlObject) {\n  var options = {\n    protocol: urlObject.protocol,\n    hostname: urlObject.hostname.startsWith(\"[\") ?\n    /* istanbul ignore next */\n    urlObject.hostname.slice(1, -1) : urlObject.hostname,\n    hash: urlObject.hash,\n    search: urlObject.search,\n    pathname: urlObject.pathname,\n    path: urlObject.pathname + urlObject.search,\n    href: urlObject.href\n  };\n\n  if (urlObject.port !== \"\") {\n    options.port = Number(urlObject.port);\n  }\n\n  return options;\n}\n\nfunction removeMatchingHeaders(regex, headers) {\n  var lastValue;\n\n  for (var header in headers) {\n    if (regex.test(header)) {\n      lastValue = headers[header];\n      delete headers[header];\n    }\n  }\n\n  return lastValue;\n}\n\nfunction createErrorType(code, defaultMessage) {\n  function CustomError(message) {\n    Error.captureStackTrace(this, this.constructor);\n    this.message = message || defaultMessage;\n  }\n\n  CustomError.prototype = new Error();\n  CustomError.prototype.constructor = CustomError;\n  CustomError.prototype.name = \"Error [\" + code + \"]\";\n  CustomError.prototype.code = code;\n  return CustomError;\n} // Exports\n\n\nmodule.exports = wrap({\n  http: http,\n  https: https\n});\nmodule.exports.wrap = wrap;","map":{"version":3,"sources":["/home/shubhangi/Documents/mentor-and-mentee-tracking-/node_modules/follow-redirects/index.js"],"names":["url","require","URL","http","https","Writable","assert","debug","eventHandlers","Object","create","forEach","event","arg1","arg2","arg3","_redirectable","emit","RedirectionError","createErrorType","TooManyRedirectsError","MaxBodyLengthExceededError","WriteAfterEndError","RedirectableRequest","options","responseCallback","call","_sanitizeOptions","_options","_ended","_ending","_redirectCount","_redirects","_requestBodyLength","_requestBodyBuffers","on","self","_onNativeResponse","response","_processResponse","_performRequest","prototype","write","data","encoding","callback","TypeError","length","maxBodyLength","push","_currentRequest","abort","end","currentRequest","setHeader","name","value","headers","removeHeader","setTimeout","msecs","once","socket","startTimer","clearTimer","request","clearTimeout","_timeout","method","a","b","property","defineProperty","get","host","hostname","pathname","path","searchPos","indexOf","substring","search","protocol","nativeProtocol","nativeProtocols","agents","scheme","substr","agent","_currentUrl","format","_isRedirect","i","buffers","writeNext","error","buffer","finished","statusCode","trackRedirects","location","followRedirects","removeAllListeners","noop","destroy","maxRedirects","test","removeMatchingHeaders","previousHostName","parse","redirectUrl","resolve","redirectUrlParts","assign","beforeRedirect","err","cause","message","responseUrl","redirects","wrap","protocols","exports","keys","wrappedProtocol","input","urlStr","urlToOptions","equal","urlObject","startsWith","slice","hash","href","port","Number","regex","lastValue","header","code","defaultMessage","CustomError","Error","captureStackTrace","constructor","module"],"mappings":"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","sourcesContent":["var url = require(\"url\");\nvar URL = url.URL;\nvar http = require(\"http\");\nvar https = require(\"https\");\nvar Writable = require(\"stream\").Writable;\nvar assert = require(\"assert\");\nvar debug = require(\"./debug\");\n\n// Create handlers that pass events from native requests\nvar eventHandlers = Object.create(null);\n[\"abort\", \"aborted\", \"connect\", \"error\", \"socket\", \"timeout\"].forEach(function (event) {\n  eventHandlers[event] = function (arg1, arg2, arg3) {\n    this._redirectable.emit(event, arg1, arg2, arg3);\n  };\n});\n\n// Error types with codes\nvar RedirectionError = createErrorType(\n  \"ERR_FR_REDIRECTION_FAILURE\",\n  \"\"\n);\nvar TooManyRedirectsError = createErrorType(\n  \"ERR_FR_TOO_MANY_REDIRECTS\",\n  \"Maximum number of redirects exceeded\"\n);\nvar MaxBodyLengthExceededError = createErrorType(\n  \"ERR_FR_MAX_BODY_LENGTH_EXCEEDED\",\n  \"Request body larger than maxBodyLength limit\"\n);\nvar WriteAfterEndError = createErrorType(\n  \"ERR_STREAM_WRITE_AFTER_END\",\n  \"write after end\"\n);\n\n// An HTTP(S) request that can be redirected\nfunction RedirectableRequest(options, responseCallback) {\n  // Initialize the request\n  Writable.call(this);\n  this._sanitizeOptions(options);\n  this._options = options;\n  this._ended = false;\n  this._ending = false;\n  this._redirectCount = 0;\n  this._redirects = [];\n  this._requestBodyLength = 0;\n  this._requestBodyBuffers = [];\n\n  // Attach a callback if passed\n  if (responseCallback) {\n    this.on(\"response\", responseCallback);\n  }\n\n  // React to responses of native requests\n  var self = this;\n  this._onNativeResponse = function (response) {\n    self._processResponse(response);\n  };\n\n  // Perform the first request\n  this._performRequest();\n}\nRedirectableRequest.prototype = Object.create(Writable.prototype);\n\n// Writes buffered data to the current native request\nRedirectableRequest.prototype.write = function (data, encoding, callback) {\n  // Writing is not allowed if end has been called\n  if (this._ending) {\n    throw new WriteAfterEndError();\n  }\n\n  // Validate input and shift parameters if necessary\n  if (!(typeof data === \"string\" || typeof data === \"object\" && (\"length\" in data))) {\n    throw new TypeError(\"data should be a string, Buffer or Uint8Array\");\n  }\n  if (typeof encoding === \"function\") {\n    callback = encoding;\n    encoding = null;\n  }\n\n  // Ignore empty buffers, since writing them doesn't invoke the callback\n  // https://github.com/nodejs/node/issues/22066\n  if (data.length === 0) {\n    if (callback) {\n      callback();\n    }\n    return;\n  }\n  // Only write when we don't exceed the maximum body length\n  if (this._requestBodyLength + data.length <= this._options.maxBodyLength) {\n    this._requestBodyLength += data.length;\n    this._requestBodyBuffers.push({ data: data, encoding: encoding });\n    this._currentRequest.write(data, encoding, callback);\n  }\n  // Error when we exceed the maximum body length\n  else {\n    this.emit(\"error\", new MaxBodyLengthExceededError());\n    this.abort();\n  }\n};\n\n// Ends the current native request\nRedirectableRequest.prototype.end = function (data, encoding, callback) {\n  // Shift parameters if necessary\n  if (typeof data === \"function\") {\n    callback = data;\n    data = encoding = null;\n  }\n  else if (typeof encoding === \"function\") {\n    callback = encoding;\n    encoding = null;\n  }\n\n  // Write data if needed and end\n  if (!data) {\n    this._ended = this._ending = true;\n    this._currentRequest.end(null, null, callback);\n  }\n  else {\n    var self = this;\n    var currentRequest = this._currentRequest;\n    this.write(data, encoding, function () {\n      self._ended = true;\n      currentRequest.end(null, null, callback);\n    });\n    this._ending = true;\n  }\n};\n\n// Sets a header value on the current native request\nRedirectableRequest.prototype.setHeader = function (name, value) {\n  this._options.headers[name] = value;\n  this._currentRequest.setHeader(name, value);\n};\n\n// Clears a header value on the current native request\nRedirectableRequest.prototype.removeHeader = function (name) {\n  delete this._options.headers[name];\n  this._currentRequest.removeHeader(name);\n};\n\n// Global timeout for all underlying requests\nRedirectableRequest.prototype.setTimeout = function (msecs, callback) {\n  if (callback) {\n    this.once(\"timeout\", callback);\n  }\n\n  if (this.socket) {\n    startTimer(this, msecs);\n  }\n  else {\n    var self = this;\n    this._currentRequest.once(\"socket\", function () {\n      startTimer(self, msecs);\n    });\n  }\n\n  this.once(\"response\", clearTimer);\n  this.once(\"error\", clearTimer);\n\n  return this;\n};\n\nfunction startTimer(request, msecs) {\n  clearTimeout(request._timeout);\n  request._timeout = setTimeout(function () {\n    request.emit(\"timeout\");\n  }, msecs);\n}\n\nfunction clearTimer() {\n  clearTimeout(this._timeout);\n}\n\n// Proxy all other public ClientRequest methods\n[\n  \"abort\", \"flushHeaders\", \"getHeader\",\n  \"setNoDelay\", \"setSocketKeepAlive\",\n].forEach(function (method) {\n  RedirectableRequest.prototype[method] = function (a, b) {\n    return this._currentRequest[method](a, b);\n  };\n});\n\n// Proxy all public ClientRequest properties\n[\"aborted\", \"connection\", \"socket\"].forEach(function (property) {\n  Object.defineProperty(RedirectableRequest.prototype, property, {\n    get: function () { return this._currentRequest[property]; },\n  });\n});\n\nRedirectableRequest.prototype._sanitizeOptions = function (options) {\n  // Ensure headers are always present\n  if (!options.headers) {\n    options.headers = {};\n  }\n\n  // Since http.request treats host as an alias of hostname,\n  // but the url module interprets host as hostname plus port,\n  // eliminate the host property to avoid confusion.\n  if (options.host) {\n    // Use hostname if set, because it has precedence\n    if (!options.hostname) {\n      options.hostname = options.host;\n    }\n    delete options.host;\n  }\n\n  // Complete the URL object when necessary\n  if (!options.pathname && options.path) {\n    var searchPos = options.path.indexOf(\"?\");\n    if (searchPos < 0) {\n      options.pathname = options.path;\n    }\n    else {\n      options.pathname = options.path.substring(0, searchPos);\n      options.search = options.path.substring(searchPos);\n    }\n  }\n};\n\n\n// Executes the next native request (initial or redirect)\nRedirectableRequest.prototype._performRequest = function () {\n  // Load the native protocol\n  var protocol = this._options.protocol;\n  var nativeProtocol = this._options.nativeProtocols[protocol];\n  if (!nativeProtocol) {\n    this.emit(\"error\", new TypeError(\"Unsupported protocol \" + protocol));\n    return;\n  }\n\n  // If specified, use the agent corresponding to the protocol\n  // (HTTP and HTTPS use different types of agents)\n  if (this._options.agents) {\n    var scheme = protocol.substr(0, protocol.length - 1);\n    this._options.agent = this._options.agents[scheme];\n  }\n\n  // Create the native request\n  var request = this._currentRequest =\n        nativeProtocol.request(this._options, this._onNativeResponse);\n  this._currentUrl = url.format(this._options);\n\n  // Set up event handlers\n  request._redirectable = this;\n  for (var event in eventHandlers) {\n    /* istanbul ignore else */\n    if (event) {\n      request.on(event, eventHandlers[event]);\n    }\n  }\n\n  // End a redirected request\n  // (The first request must be ended explicitly with RedirectableRequest#end)\n  if (this._isRedirect) {\n    // Write the request entity and end.\n    var i = 0;\n    var self = this;\n    var buffers = this._requestBodyBuffers;\n    (function writeNext(error) {\n      // Only write if this request has not been redirected yet\n      /* istanbul ignore else */\n      if (request === self._currentRequest) {\n        // Report any write errors\n        /* istanbul ignore if */\n        if (error) {\n          self.emit(\"error\", error);\n        }\n        // Write the next buffer if there are still left\n        else if (i < buffers.length) {\n          var buffer = buffers[i++];\n          /* istanbul ignore else */\n          if (!request.finished) {\n            request.write(buffer.data, buffer.encoding, writeNext);\n          }\n        }\n        // End the request if `end` has been called on us\n        else if (self._ended) {\n          request.end();\n        }\n      }\n    }());\n  }\n};\n\n// Processes a response from the current native request\nRedirectableRequest.prototype._processResponse = function (response) {\n  // Store the redirected response\n  var statusCode = response.statusCode;\n  if (this._options.trackRedirects) {\n    this._redirects.push({\n      url: this._currentUrl,\n      headers: response.headers,\n      statusCode: statusCode,\n    });\n  }\n\n  // RFC7231ยง6.4: The 3xx (Redirection) class of status code indicates\n  // that further action needs to be taken by the user agent in order to\n  // fulfill the request. If a Location header field is provided,\n  // the user agent MAY automatically redirect its request to the URI\n  // referenced by the Location field value,\n  // even if the specific status code is not understood.\n  var location = response.headers.location;\n  if (location && this._options.followRedirects !== false &&\n      statusCode >= 300 && statusCode < 400) {\n    // Abort the current request\n    this._currentRequest.removeAllListeners();\n    this._currentRequest.on(\"error\", noop);\n    this._currentRequest.abort();\n    // Discard the remainder of the response to avoid waiting for data\n    response.destroy();\n\n    // RFC7231ยง6.4: A client SHOULD detect and intervene\n    // in cyclical redirections (i.e., \"infinite\" redirection loops).\n    if (++this._redirectCount > this._options.maxRedirects) {\n      this.emit(\"error\", new TooManyRedirectsError());\n      return;\n    }\n\n    // RFC7231ยง6.4: Automatic redirection needs to done with\n    // care for methods not known to be safe, [โฆ]\n    // RFC7231ยง6.4.2โ3: For historical reasons, a user agent MAY change\n    // the request method from POST to GET for the subsequent request.\n    if ((statusCode === 301 || statusCode === 302) && this._options.method === \"POST\" ||\n        // RFC7231ยง6.4.4: The 303 (See Other) status code indicates that\n        // the server is redirecting the user agent to a different resource [โฆ]\n        // A user agent can perform a retrieval request targeting that URI\n        // (a GET or HEAD request if using HTTP) [โฆ]\n        (statusCode === 303) && !/^(?:GET|HEAD)$/.test(this._options.method)) {\n      this._options.method = \"GET\";\n      // Drop a possible entity and headers related to it\n      this._requestBodyBuffers = [];\n      removeMatchingHeaders(/^content-/i, this._options.headers);\n    }\n\n    // Drop the Host header, as the redirect might lead to a different host\n    var previousHostName = removeMatchingHeaders(/^host$/i, this._options.headers) ||\n      url.parse(this._currentUrl).hostname;\n\n    // Create the redirected request\n    var redirectUrl = url.resolve(this._currentUrl, location);\n    debug(\"redirecting to\", redirectUrl);\n    this._isRedirect = true;\n    var redirectUrlParts = url.parse(redirectUrl);\n    Object.assign(this._options, redirectUrlParts);\n\n    // Drop the Authorization header if redirecting to another host\n    if (redirectUrlParts.hostname !== previousHostName) {\n      removeMatchingHeaders(/^authorization$/i, this._options.headers);\n    }\n\n    // Evaluate the beforeRedirect callback\n    if (typeof this._options.beforeRedirect === \"function\") {\n      try {\n        this._options.beforeRedirect.call(null, this._options);\n      }\n      catch (err) {\n        this.emit(\"error\", err);\n        return;\n      }\n      this._sanitizeOptions(this._options);\n    }\n\n    // Perform the redirected request\n    try {\n      this._performRequest();\n    }\n    catch (cause) {\n      var error = new RedirectionError(\"Redirected request failed: \" + cause.message);\n      error.cause = cause;\n      this.emit(\"error\", error);\n    }\n  }\n  else {\n    // The response is not a redirect; return it as-is\n    response.responseUrl = this._currentUrl;\n    response.redirects = this._redirects;\n    this.emit(\"response\", response);\n\n    // Clean up\n    this._requestBodyBuffers = [];\n  }\n};\n\n// Wraps the key/value object of protocols with redirect functionality\nfunction wrap(protocols) {\n  // Default settings\n  var exports = {\n    maxRedirects: 21,\n    maxBodyLength: 10 * 1024 * 1024,\n  };\n\n  // Wrap each protocol\n  var nativeProtocols = {};\n  Object.keys(protocols).forEach(function (scheme) {\n    var protocol = scheme + \":\";\n    var nativeProtocol = nativeProtocols[protocol] = protocols[scheme];\n    var wrappedProtocol = exports[scheme] = Object.create(nativeProtocol);\n\n    // Executes a request, following redirects\n    wrappedProtocol.request = function (input, options, callback) {\n      // Parse parameters\n      if (typeof input === \"string\") {\n        var urlStr = input;\n        try {\n          input = urlToOptions(new URL(urlStr));\n        }\n        catch (err) {\n          /* istanbul ignore next */\n          input = url.parse(urlStr);\n        }\n      }\n      else if (URL && (input instanceof URL)) {\n        input = urlToOptions(input);\n      }\n      else {\n        callback = options;\n        options = input;\n        input = { protocol: protocol };\n      }\n      if (typeof options === \"function\") {\n        callback = options;\n        options = null;\n      }\n\n      // Set defaults\n      options = Object.assign({\n        maxRedirects: exports.maxRedirects,\n        maxBodyLength: exports.maxBodyLength,\n      }, input, options);\n      options.nativeProtocols = nativeProtocols;\n\n      assert.equal(options.protocol, protocol, \"protocol mismatch\");\n      debug(\"options\", options);\n      return new RedirectableRequest(options, callback);\n    };\n\n    // Executes a GET request, following redirects\n    wrappedProtocol.get = function (input, options, callback) {\n      var request = wrappedProtocol.request(input, options, callback);\n      request.end();\n      return request;\n    };\n  });\n  return exports;\n}\n\n/* istanbul ignore next */\nfunction noop() { /* empty */ }\n\n// from https://github.com/nodejs/node/blob/master/lib/internal/url.js\nfunction urlToOptions(urlObject) {\n  var options = {\n    protocol: urlObject.protocol,\n    hostname: urlObject.hostname.startsWith(\"[\") ?\n      /* istanbul ignore next */\n      urlObject.hostname.slice(1, -1) :\n      urlObject.hostname,\n    hash: urlObject.hash,\n    search: urlObject.search,\n    pathname: urlObject.pathname,\n    path: urlObject.pathname + urlObject.search,\n    href: urlObject.href,\n  };\n  if (urlObject.port !== \"\") {\n    options.port = Number(urlObject.port);\n  }\n  return options;\n}\n\nfunction removeMatchingHeaders(regex, headers) {\n  var lastValue;\n  for (var header in headers) {\n    if (regex.test(header)) {\n      lastValue = headers[header];\n      delete headers[header];\n    }\n  }\n  return lastValue;\n}\n\nfunction createErrorType(code, defaultMessage) {\n  function CustomError(message) {\n    Error.captureStackTrace(this, this.constructor);\n    this.message = message || defaultMessage;\n  }\n  CustomError.prototype = new Error();\n  CustomError.prototype.constructor = CustomError;\n  CustomError.prototype.name = \"Error [\" + code + \"]\";\n  CustomError.prototype.code = code;\n  return CustomError;\n}\n\n// Exports\nmodule.exports = wrap({ http: http, https: https });\nmodule.exports.wrap = wrap;\n"]},"metadata":{},"sourceType":"script"}