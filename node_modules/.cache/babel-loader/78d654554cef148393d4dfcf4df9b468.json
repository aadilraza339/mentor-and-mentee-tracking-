{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getArrow = exports.getInstance = void 0;\n\nconst _ = require(\"lodash\");\n\nconst util = require(\"util\");\n\nlet loggerInstance;\nconst defaultProvider = {\n  // tslint:disable: no-console\n  log: console.log,\n  debug: console.log,\n  info: console.info,\n  warn: console.warn,\n  error: console.error\n}; // log level 'weight'\n\nvar LEVELS;\n\n(function (LEVELS) {\n  LEVELS[LEVELS[\"debug\"] = 10] = \"debug\";\n  LEVELS[LEVELS[\"info\"] = 20] = \"info\";\n  LEVELS[LEVELS[\"warn\"] = 30] = \"warn\";\n  LEVELS[LEVELS[\"error\"] = 50] = \"error\";\n  LEVELS[LEVELS[\"silent\"] = 80] = \"silent\";\n})(LEVELS || (LEVELS = {}));\n\nfunction getInstance() {\n  if (!loggerInstance) {\n    loggerInstance = new Logger();\n  }\n\n  return loggerInstance;\n}\n\nexports.getInstance = getInstance;\n\nclass Logger {\n  constructor() {\n    this.setLevel('info');\n    this.setProvider(() => defaultProvider);\n  } // log will log messages, regardless of logLevels\n\n\n  log() {\n    this.provider.log(this._interpolate.apply(null, arguments));\n  }\n\n  debug() {\n    if (this._showLevel('debug')) {\n      this.provider.debug(this._interpolate.apply(null, arguments));\n    }\n  }\n\n  info() {\n    if (this._showLevel('info')) {\n      this.provider.info(this._interpolate.apply(null, arguments));\n    }\n  }\n\n  warn() {\n    if (this._showLevel('warn')) {\n      this.provider.warn(this._interpolate.apply(null, arguments));\n    }\n  }\n\n  error() {\n    if (this._showLevel('error')) {\n      this.provider.error(this._interpolate.apply(null, arguments));\n    }\n  }\n\n  setLevel(v) {\n    if (this.isValidLevel(v)) {\n      this.logLevel = v;\n    }\n  }\n\n  setProvider(fn) {\n    if (fn && this.isValidProvider(fn)) {\n      this.provider = fn(defaultProvider);\n    }\n  }\n\n  isValidProvider(fnProvider) {\n    const result = true;\n\n    if (fnProvider && !_.isFunction(fnProvider)) {\n      throw new Error('[HPM] Log provider config error. Expecting a function.');\n    }\n\n    return result;\n  }\n\n  isValidLevel(levelName) {\n    const validLevels = Object.keys(LEVELS);\n    const isValid = validLevels.includes(levelName);\n\n    if (!isValid) {\n      throw new Error('[HPM] Log level error. Invalid logLevel.');\n    }\n\n    return isValid;\n  }\n  /**\n   * Decide to log or not to log, based on the log levels 'weight'\n   * @param  {String}  showLevel [debug, info, warn, error, silent]\n   * @return {Boolean}\n   */\n\n\n  _showLevel(showLevel) {\n    let result = false;\n    const currentLogLevel = LEVELS[this.logLevel];\n\n    if (currentLogLevel && currentLogLevel <= LEVELS[showLevel]) {\n      result = true;\n    }\n\n    return result;\n  } // make sure logged messages and its data are return interpolated\n  // make it possible for additional log data, such date/time or custom prefix.\n\n\n  _interpolate() {\n    const fn = _.spread(util.format);\n\n    const result = fn(_.slice(arguments));\n    return result;\n  }\n\n}\n/**\n * -> normal proxy\n * => router\n * ~> pathRewrite\n * ≈> router + pathRewrite\n *\n * @param  {String} originalPath\n * @param  {String} newPath\n * @param  {String} originalTarget\n * @param  {String} newTarget\n * @return {String}\n */\n\n\nfunction getArrow(originalPath, newPath, originalTarget, newTarget) {\n  const arrow = ['>'];\n  const isNewTarget = originalTarget !== newTarget; // router\n\n  const isNewPath = originalPath !== newPath; // pathRewrite\n\n  if (isNewPath && !isNewTarget) {\n    arrow.unshift('~');\n  } else if (!isNewPath && isNewTarget) {\n    arrow.unshift('=');\n  } else if (isNewPath && isNewTarget) {\n    arrow.unshift('≈');\n  } else {\n    arrow.unshift('-');\n  }\n\n  return arrow.join('');\n}\n\nexports.getArrow = getArrow;","map":{"version":3,"sources":["/home/shubhangi/Documents/mentor-and-mentee-tracking-/node_modules/http-proxy-middleware/dist/logger.js"],"names":["Object","defineProperty","exports","value","getArrow","getInstance","_","require","util","loggerInstance","defaultProvider","log","console","debug","info","warn","error","LEVELS","Logger","constructor","setLevel","setProvider","provider","_interpolate","apply","arguments","_showLevel","v","isValidLevel","logLevel","fn","isValidProvider","fnProvider","result","isFunction","Error","levelName","validLevels","keys","isValid","includes","showLevel","currentLogLevel","spread","format","slice","originalPath","newPath","originalTarget","newTarget","arrow","isNewTarget","isNewPath","unshift","join"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getArrow = exports.getInstance = void 0;\nconst _ = require(\"lodash\");\nconst util = require(\"util\");\nlet loggerInstance;\nconst defaultProvider = {\n    // tslint:disable: no-console\n    log: console.log,\n    debug: console.log,\n    info: console.info,\n    warn: console.warn,\n    error: console.error,\n};\n// log level 'weight'\nvar LEVELS;\n(function (LEVELS) {\n    LEVELS[LEVELS[\"debug\"] = 10] = \"debug\";\n    LEVELS[LEVELS[\"info\"] = 20] = \"info\";\n    LEVELS[LEVELS[\"warn\"] = 30] = \"warn\";\n    LEVELS[LEVELS[\"error\"] = 50] = \"error\";\n    LEVELS[LEVELS[\"silent\"] = 80] = \"silent\";\n})(LEVELS || (LEVELS = {}));\nfunction getInstance() {\n    if (!loggerInstance) {\n        loggerInstance = new Logger();\n    }\n    return loggerInstance;\n}\nexports.getInstance = getInstance;\nclass Logger {\n    constructor() {\n        this.setLevel('info');\n        this.setProvider(() => defaultProvider);\n    }\n    // log will log messages, regardless of logLevels\n    log() {\n        this.provider.log(this._interpolate.apply(null, arguments));\n    }\n    debug() {\n        if (this._showLevel('debug')) {\n            this.provider.debug(this._interpolate.apply(null, arguments));\n        }\n    }\n    info() {\n        if (this._showLevel('info')) {\n            this.provider.info(this._interpolate.apply(null, arguments));\n        }\n    }\n    warn() {\n        if (this._showLevel('warn')) {\n            this.provider.warn(this._interpolate.apply(null, arguments));\n        }\n    }\n    error() {\n        if (this._showLevel('error')) {\n            this.provider.error(this._interpolate.apply(null, arguments));\n        }\n    }\n    setLevel(v) {\n        if (this.isValidLevel(v)) {\n            this.logLevel = v;\n        }\n    }\n    setProvider(fn) {\n        if (fn && this.isValidProvider(fn)) {\n            this.provider = fn(defaultProvider);\n        }\n    }\n    isValidProvider(fnProvider) {\n        const result = true;\n        if (fnProvider && !_.isFunction(fnProvider)) {\n            throw new Error('[HPM] Log provider config error. Expecting a function.');\n        }\n        return result;\n    }\n    isValidLevel(levelName) {\n        const validLevels = Object.keys(LEVELS);\n        const isValid = validLevels.includes(levelName);\n        if (!isValid) {\n            throw new Error('[HPM] Log level error. Invalid logLevel.');\n        }\n        return isValid;\n    }\n    /**\n     * Decide to log or not to log, based on the log levels 'weight'\n     * @param  {String}  showLevel [debug, info, warn, error, silent]\n     * @return {Boolean}\n     */\n    _showLevel(showLevel) {\n        let result = false;\n        const currentLogLevel = LEVELS[this.logLevel];\n        if (currentLogLevel && currentLogLevel <= LEVELS[showLevel]) {\n            result = true;\n        }\n        return result;\n    }\n    // make sure logged messages and its data are return interpolated\n    // make it possible for additional log data, such date/time or custom prefix.\n    _interpolate() {\n        const fn = _.spread(util.format);\n        const result = fn(_.slice(arguments));\n        return result;\n    }\n}\n/**\n * -> normal proxy\n * => router\n * ~> pathRewrite\n * ≈> router + pathRewrite\n *\n * @param  {String} originalPath\n * @param  {String} newPath\n * @param  {String} originalTarget\n * @param  {String} newTarget\n * @return {String}\n */\nfunction getArrow(originalPath, newPath, originalTarget, newTarget) {\n    const arrow = ['>'];\n    const isNewTarget = originalTarget !== newTarget; // router\n    const isNewPath = originalPath !== newPath; // pathRewrite\n    if (isNewPath && !isNewTarget) {\n        arrow.unshift('~');\n    }\n    else if (!isNewPath && isNewTarget) {\n        arrow.unshift('=');\n    }\n    else if (isNewPath && isNewTarget) {\n        arrow.unshift('≈');\n    }\n    else {\n        arrow.unshift('-');\n    }\n    return arrow.join('');\n}\nexports.getArrow = getArrow;\n"]},"metadata":{},"sourceType":"script"}