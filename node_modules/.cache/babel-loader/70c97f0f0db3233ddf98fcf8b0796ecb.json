{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createConfig = void 0;\n\nconst _ = require(\"lodash\");\n\nconst url = require(\"url\");\n\nconst errors_1 = require(\"./errors\");\n\nconst logger_1 = require(\"./logger\");\n\nconst logger = logger_1.getInstance();\n\nfunction createConfig(context, opts) {\n  // structure of config object to be returned\n  const config = {\n    context: undefined,\n    options: {}\n  }; // app.use('/api', proxy({target:'http://localhost:9000'}));\n\n  if (isContextless(context, opts)) {\n    config.context = '/';\n    config.options = _.assign(config.options, context); // app.use('/api', proxy('http://localhost:9000'));\n    // app.use(proxy('http://localhost:9000/api'));\n  } else if (isStringShortHand(context)) {\n    const oUrl = url.parse(context);\n    const target = [oUrl.protocol, '//', oUrl.host].join('');\n    config.context = oUrl.pathname || '/';\n    config.options = _.assign(config.options, {\n      target\n    }, opts);\n\n    if (oUrl.protocol === 'ws:' || oUrl.protocol === 'wss:') {\n      config.options.ws = true;\n    } // app.use('/api', proxy({target:'http://localhost:9000'}));\n\n  } else {\n    config.context = context;\n    config.options = _.assign(config.options, opts);\n  }\n\n  configureLogger(config.options);\n\n  if (!config.options.target) {\n    throw new Error(errors_1.ERRORS.ERR_CONFIG_FACTORY_TARGET_MISSING);\n  }\n\n  return config;\n}\n\nexports.createConfig = createConfig;\n/**\n * Checks if a String only target/config is provided.\n * This can be just the host or with the optional path.\n *\n * @example\n *      app.use('/api', proxy('http://localhost:9000'));\n *      app.use(proxy('http://localhost:9000/api'));\n *\n * @param  {String}  context [description]\n * @return {Boolean}         [description]\n */\n\nfunction isStringShortHand(context) {\n  if (_.isString(context)) {\n    return !!url.parse(context).host;\n  }\n}\n/**\n * Checks if a Object only config is provided, without a context.\n * In this case the all paths will be proxied.\n *\n * @example\n *     app.use('/api', proxy({target:'http://localhost:9000'}));\n *\n * @param  {Object}  context [description]\n * @param  {*}       opts    [description]\n * @return {Boolean}         [description]\n */\n\n\nfunction isContextless(context, opts) {\n  return _.isPlainObject(context) && _.isEmpty(opts);\n}\n\nfunction configureLogger(options) {\n  if (options.logLevel) {\n    logger.setLevel(options.logLevel);\n  }\n\n  if (options.logProvider) {\n    logger.setProvider(options.logProvider);\n  }\n}","map":{"version":3,"sources":["/home/shubhangi/Documents/mentor-and-mentee-tracking-/node_modules/http-proxy-middleware/dist/config-factory.js"],"names":["Object","defineProperty","exports","value","createConfig","_","require","url","errors_1","logger_1","logger","getInstance","context","opts","config","undefined","options","isContextless","assign","isStringShortHand","oUrl","parse","target","protocol","host","join","pathname","ws","configureLogger","Error","ERRORS","ERR_CONFIG_FACTORY_TARGET_MISSING","isString","isPlainObject","isEmpty","logLevel","setLevel","logProvider","setProvider"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createConfig = void 0;\nconst _ = require(\"lodash\");\nconst url = require(\"url\");\nconst errors_1 = require(\"./errors\");\nconst logger_1 = require(\"./logger\");\nconst logger = logger_1.getInstance();\nfunction createConfig(context, opts) {\n    // structure of config object to be returned\n    const config = {\n        context: undefined,\n        options: {},\n    };\n    // app.use('/api', proxy({target:'http://localhost:9000'}));\n    if (isContextless(context, opts)) {\n        config.context = '/';\n        config.options = _.assign(config.options, context);\n        // app.use('/api', proxy('http://localhost:9000'));\n        // app.use(proxy('http://localhost:9000/api'));\n    }\n    else if (isStringShortHand(context)) {\n        const oUrl = url.parse(context);\n        const target = [oUrl.protocol, '//', oUrl.host].join('');\n        config.context = oUrl.pathname || '/';\n        config.options = _.assign(config.options, { target }, opts);\n        if (oUrl.protocol === 'ws:' || oUrl.protocol === 'wss:') {\n            config.options.ws = true;\n        }\n        // app.use('/api', proxy({target:'http://localhost:9000'}));\n    }\n    else {\n        config.context = context;\n        config.options = _.assign(config.options, opts);\n    }\n    configureLogger(config.options);\n    if (!config.options.target) {\n        throw new Error(errors_1.ERRORS.ERR_CONFIG_FACTORY_TARGET_MISSING);\n    }\n    return config;\n}\nexports.createConfig = createConfig;\n/**\n * Checks if a String only target/config is provided.\n * This can be just the host or with the optional path.\n *\n * @example\n *      app.use('/api', proxy('http://localhost:9000'));\n *      app.use(proxy('http://localhost:9000/api'));\n *\n * @param  {String}  context [description]\n * @return {Boolean}         [description]\n */\nfunction isStringShortHand(context) {\n    if (_.isString(context)) {\n        return !!url.parse(context).host;\n    }\n}\n/**\n * Checks if a Object only config is provided, without a context.\n * In this case the all paths will be proxied.\n *\n * @example\n *     app.use('/api', proxy({target:'http://localhost:9000'}));\n *\n * @param  {Object}  context [description]\n * @param  {*}       opts    [description]\n * @return {Boolean}         [description]\n */\nfunction isContextless(context, opts) {\n    return _.isPlainObject(context) && _.isEmpty(opts);\n}\nfunction configureLogger(options) {\n    if (options.logLevel) {\n        logger.setLevel(options.logLevel);\n    }\n    if (options.logProvider) {\n        logger.setProvider(options.logProvider);\n    }\n}\n"]},"metadata":{},"sourceType":"script"}